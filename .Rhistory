)
)
)
# Define the server logic
server <- function(input, output) {
# Generate a greeting message based on user input
output$greeting <- renderText({
if (input$greetButton > 0) {
paste("Hello, ", input$name, "!")
}
})
}
# Create a Shiny app
shinyApp(ui, server)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title
titlePanel("Simple Addition Calculator"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number1", "Enter the first number:", value = 0),
numericInput("number2", "Enter the second number:", value = 0),
actionButton("calculateButton", "Calculate")
),
# Main panel
mainPanel(
h3("Result:"),
textOutput("result")
)
)
)
# Define the server logic
server <- function(input, output) {
# Perform addition when the "Calculate" button is clicked
observeEvent(input$calculateButton, {
result <- input$number1 + input$number2
output$result <- renderText({
paste("Result: ", result)
})
})
}
# Create a Shiny app
shinyApp(ui, server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title
titlePanel("Sum Numbers to 10"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("enteredNumber", "Enter a number (1-9):", min = 1, max = 9, value = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Current Sum:"),
textOutput("currentSum"),
h3("Status:"),
textOutput("status")
)
)
)
# Define the server logic
server <- function(input, output) {
# Initialize variables
sum_value <- 0
status <- ""
# Add numbers and update the sum when the "Add Number" button is clicked
observeEvent(input$addButton, {
entered_number <- input$enteredNumber
# Check if the entered number is within the valid range
if (entered_number >= 1 && entered_number <= 9) {
sum_value <- sum_value + entered_number
# Check if the sum has reached or exceeded 10
if (sum_value >= 10) {
status <- "Target reached!"
} else {
status <- ""
}
} else {
status <- "Please enter a number between 1 and 9."
}
output$currentSum <- renderText({
paste("Current Sum:", sum_value)
})
output$status <- renderText({
status
})
})
}
# Create a Shiny app
shinyApp(ui, server)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title
titlePanel("Sum Numbers Until 10"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Define the server logic
server <- function(input, output) {
# Create reactive values to store the list of numbers and the sum
numbers <- reactiveValues(numbersList = c(), sum = 0)
# Add the number when the "Add Number" button is clicked
observeEvent(input$addButton, {
if (numbers$sum + input$number <= 10) {
numbers$numbersList <- c(numbers$numbersList, input$number)
numbers$sum <- numbers$sum + input$number
}
})
# Display the list of numbers and the sum
output$numbersList <- renderPrint({
numbers$numbersList
})
output$sumOutput <- renderText({
paste("Sum: ", numbers$sum)
})
}
# Create a Shiny app
shinyApp(ui, server)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title with CSS styling
tags$head(
tags$style(HTML(".title {text-align: center;}"))
),
titlePanel("Sum Numbers Until 10", class = "title"),  # Apply "title" class to title panel
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title with CSS styling
tags$head(
tags$style(HTML(".title {text-align: center;}"))
),
titlePanel("Sum Numbers Until 10", class = "title"),  # Apply "title" class to title panel
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Display the list of numbers and the sum
output$numbersList <-
# Load the Shiny library
library(shiny)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title with CSS styling
tags$head(
tags$style(HTML(".title {text-align: center;}"))
),
titlePanel("Sum Numbers Until 10", class = "title"),  # Apply "title" class to title panel
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title with CSS styling
tags$head(
tags$style(HTML(".title-panel {text-align: center;}"))
),
div(class = "title-panel",
titlePanel("Sum Numbers Until 10")),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Define the server logic
server <- function(input, output) {
# Create reactive values to store the list of numbers and the sum
numbers <- reactiveValues(numbersList = c(), sum = 0)
# Add the number when the "Add Number" button is clicked
observeEvent(input$addButton, {
if (numbers$sum + input$number <= 10) {
numbers$numbersList <- c(numbers$numbersList, input$number)
numbers$sum <- numbers$sum + input$number
}
})
# Display the list of numbers and the sum
output$numbersList <- renderPrint({
numbers$numbersList
})
output$sumOutput <- renderText({
paste("Sum: ", numbers$
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Define the user interface
ui <- fluidPage(
# Application title with CSS styling
tags$head(
tags$style(HTML(".title-panel {text-align: center;}"))
),
div(class = "title-panel",
titlePanel("Sum Numbers Until 10")),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Load the Shiny library
library(shiny)
# Define the user interface
ui <- fluidPage(
# Application title with CSS styling
tags$head(
tags$style(HTML(".title-panel {text-align: center;}"))
),
div(class = "title-panel",
titlePanel("Sum Numbers Until 10")),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel
sidebarPanel(
numericInput("number", "Enter a number (1-9):", value = 1, min = 1, max = 9, step = 1),
actionButton("addButton", "Add Number")
),
# Main panel
mainPanel(
h3("Numbers Entered:"),
verbatimTextOutput("numbersList"),
h3("Sum:"),
textOutput("sumOutput")
)
)
)
# Define the server logic
server <- function(input, output) {
# Create reactive values to store the list of numbers and the sum
numbers <- reactiveValues(numbersList = c(), sum = 0)
# Add the number when the "Add Number" button is clicked
observeEvent(input$addButton, {
if (numbers$sum + input$number <= 10) {
numbers$numbersList <- c(numbers$numbersList, input$number)
numbers$sum <- numbers$sum + input$number
}
})
# Display the list of numbers and the sum
output$numbersList <- renderPrint({
numbers$numbersList
})
output$sumOutput <- renderText({
paste("Sum: ", numbers$sum)
})
}
# Create a Shiny app
shinyApp(ui, server)
install.packages(shinytheme)
install.packages(shinythemes)
if (!require(ApacheLogProcessor)) {
install.packages("ApacheLogProcessor")
}
install.packages("shinythemes")
metrics <- c("Metric 1: number of users based on IP field",
"Metric 2: visits per day average",
"Metric 3: failed requests",
"Metric 4: 404 errors",
"Metric 5: Average by day of the week",
"Metric 6: mean time of the session",
"Metric 7: Clicks per session"
)
weights <- numeric(length(metrics))  # Vector to store weights
remaining_weight <- 1
cat("List of available metrics:\n")
for (i in 1:length(metrics)) {
cat(i, ": ", metrics[i], "\n")
}
while (TRUE) {
for (i in 1:length(metrics)) {
selected_metric <- as.integer(readline(paste("Select a metric (", i, " of ", length(metrics), "): ")))
if (is.na(selected_metric) || selected_metric < 1 || selected_metric > length(metrics)) {
cat("Invalid selection.\n")
break
}
cat("Selected metric:", metrics[selected_metric], "\n")
repeat {
weight <- as.numeric(readline(paste("Enter the weight for '", metrics[selected_metric], "' (between 0 and ", remaining_weight, " inclusive): ")))
if (!is.na(weight) && weight >= 0 && weight <= remaining_weight) {
weights[selected_metric] <- weight
remaining_weight <- remaining_weight - weight
break
} else {
cat("The entered weight is invalid or exceeds the remaining weight. Please enter a valid weight.\n")
}
}
if (remaining_weight <= 0) {
break
}
if (i < length(metrics)) {
cat("Remaining weight:", remaining_weight, "\n")
cont <- as.character(readline("Do you want to continue? (y/n): "))
if (cont != "y") {
break
}
}
}
if (sum(weights) == 1) {
cat("Assigned weights:\n")
for (i in 1:length(metrics)) {
cat(metrics[i], " Weight:", weights[i], "\n")
}
break
} else {
cat("Weights must sum up to 1. Please review your values.\n")
remaining_weight <- 1
}
}
1
dfs
metrics <- c("Metric 1: number of users based on IP field",
"Metric 2: visits per day average",
"Metric 3: failed requests",
"Metric 4: 404 errors",
"Metric 5: Average by day of the week",
"Metric 6: mean time of the session",
"Metric 7: Clicks per session"
)
weights <- numeric(length(metrics))  # Vector to store weights
remaining_weight <- 1
cat("List of available metrics:\n")
for (i in 1:length(metrics)) {
cat(i, ": ", metrics[i], "\n")
}
while (TRUE) {
for (i in 1:length(metrics)) {
selected_metric <- as.integer(readline(paste("Select a metric (", i, " of ", length(metrics), "): ")))
if (is.na(selected_metric) || selected_metric < 1 || selected_metric > length(metrics)) {
cat("Invalid selection.\n")
break
}
cat("Selected metric:", metrics[selected_metric], "\n")
repeat {
weight <- as.numeric(readline(paste("Enter the weight for '", metrics[selected_metric], "' (between 0 and ", remaining_weight, " inclusive): ")))
if (!is.na(weight) && weight >= 0 && weight <= remaining_weight) {
weights[selected_metric] <- weight
remaining_weight <- remaining_weight - weight
break
} else {
cat("The entered weight is invalid or exceeds the remaining weight. Please enter a valid weight.\n")
}
}
if (remaining_weight <= 0) {
break
}
if (i < length(metrics)) {
cat("Remaining weight:", remaining_weight, "\n")
cont <- as.character(readline("Do you want to continue? (y/n): "))
if (cont != "y") {
break
}
}
}
if (sum(weights) == 1) {
cat("Assigned weights:\n")
for (i in 1:length(metrics)) {
cat(metrics[i], " Weight:", weights[i], "\n")
}
break
} else {
cat("Weights must sum up to 1. Please review your values.\n")
remaining_weight <- 1
}
}
setwd("~/Geo-portal")
# MainModule.R
library(shiny)
# Load the UI from ui.R
source("ui.R", local = TRUE)
setwd("~/Geo-portal")
ui <- fluidPage(
selectInput("var", "Variable", names(mtcars)),
numericInput("bins", "bins", 10, min = 1),
plotOutput("hist")
)
server <- function(input, output, session) {
data <- reactive(mtcars[[input$var]])
output$hist <- renderPlot({
hist(data(), breaks = input$bins, main = input$var)
}, res = 96)
}
library(shiny)
ui <- fluidPage(
selectInput("var", "Variable", names(mtcars)),
numericInput("bins", "bins", 10, min = 1),
plotOutput("hist")
)
server <- function(input, output, session) {
data <- reactive(mtcars[[input$var]])
output$hist <- renderPlot({
hist(data(), breaks = input$bins, main = input$var)
}, res = 96)
}
library(shiny)
ui <- fluidPage(
selectInput("var", "Variable", names(mtcars)),
numericInput("bins", "bins", 10, min = 1),
plotOutput("hist")
)
server <- function(input, output, session) {
data <- reactive(mtcars[[input$var]])
output$hist <- renderPlot({
hist(data(), breaks = input$bins, main = input$var)
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("var", "Variable", names(mtcars)),
numericInput("bins", "bins", 10, min = 1),
plotOutput("hist")
)
server <- function(input, output, session) {
data <- reactive(mtcars[[input$var]])
output$hist <- renderPlot({
hist(data(), breaks = input$bins, main = input$var)
}, res = 96)
}
shinyApp(ui, server)
setwd("~/Testeo/testeo")
setwd("~/Geo-portal/MetricsUi")
setwd("~/Geo-portal/MetricsUi")
